#!/usr/bin/env python
# -*- coding: utf-8 -*-
#===========================
#   IMPORTS
#===========================
import urllib, urllib2
import sys
from Attack import *
from messages import *
from module import *


#===================================
#   VARS
#===================================
# SYS
exec_name = sys.argv[0]
# Init of the attack
attack = Attack(    False, # If the url is valid
					False, # The target Url
					False, # If the url Has a payload
					False, # If it's a blind injection
					False  # The specified attack (Only if the url has a payload)
				)

#====================================================================================================================
#
#   BEGIN
#
#====================================================================================================================

#print "This is the name of the script: ", sys.argv[0]
#print "Number of arguments: ", len(sys.argv)
#print "The arguments are: " , str(sys.argv)

# ============================================
#   USAGE
# ============================================
# Show advanced usage of SQLHuntt
if len(sys.argv) > 1 and sys.argv[1] == C_FULL_HELP:
	SHOW_FULL_USAGE(exec_name)
	sys.exit()

# ============================================
#   GET URL PASSED WITH THE PARAMETERS
# ============================================
if sys.argv[1] == C_URL and len( sys.argv ) > 2:
	attack.target_url = sys.argv[2].lower().strip("\"")
	# Check if it's a valid URL, if it is continue
	if check_url(attack.target_url) == True:
		attack.valid_url = True
	else:
		##### ADD WHY THE ERROR IS NOT VALID
		##### CREATE FUNCTION: CHECK URL ERROR THAT RETURNS THE EXACT PROBLEM WITH THE URL
		##### PRINT THE RETURNED MESSAGE ON COMMAND LINE
		SCRIPT_ERROR( invalid_url )
		sys.exit()
else:
	SHOW_USAGE( exec_name )
	sys.exit()



# ===================================================================================================
#
#   CORE
#
# ===================================================================================================
# Continue only if URL is valid
if attack.valid_url != True:
	sys.exit()

# ====================================================================================
#   URL WITH PAYLOAD
# ====================================================================================
SCRIPT_BOLD( begin_msg )

# Check if there is a payload in the url
if has_payload( attack.target_url ):
	attack.has_payload = True
	# We check if it's a blind Injection or not
	if is_blind( attack.target_url ):
		attack.is_blind_injection = True

	# Check if the user has passed attack parameters
	if len( sys.argv ) > 3 :
		SCRIPT_GOOD( continue_msg )
		attack.specified_attack = sys.argv[ 3 ]
	else:
		SCRIPT_WARNING( warning_url_with_payload_without_params + "\n" )
		SHOW_PAYLOAD_ATTACKS( exec_name )
		sys.exit()

else:
	attack.has_payload = False


# =============================================================
#   NOT BLIND INJECTION
# =============================================================
# General verifications 
if not attack.is_blind_injection and attack.has_payload:
	##### ADD IF with Database Dump?
	# Check if the parameter is known by SQLHuntt
	if attack.specified_attack == C_UNION:
		SCRIPT_BOLD( "Attack: " + attack.specified_attack )
		SCRIPT_WARNING( not_implemented_attack_msg )

	elif attack.specified_attack == C_UNION_LIMIT:
		SCRIPT_BOLD( "Attack: " + attack.specified_attack )
		##### Add SELECT PARAMS INTO AN ARRAY
	else:
		SCRIPT_ERROR( invalid_specified_attack )
		SCRIPT_ERROR_SIMPLE( "Option " + attack.specified_attack + " is not known by " + V_NAME + "\n" )
		SHOW_PAYLOAD_ATTACKS( exec_name )
		sys.exit()

# ===========================================================
# 	IF THE ATTACKS IS KNOW WE CONTINUE
# ===========================================================
##### CHECK IF THE PAYLOAD WORKS
# SCRIPT_INFO( payload_verification_msg )





# =============================================================
#   BLIND INJECTION
# =============================================================








# ====================================================================================
#   URL WITHOUT PAYLOAD
# ====================================================================================
# TO DO
# Verify is payload is bad or there is no payload